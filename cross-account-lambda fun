import boto3
import json
import botocore.exceptions

def lambda_handler(event, context):
    # Create a client object for the STS service
    sts_client = boto3.client('sts')
    
    # Assume the IAM role in the other AWS account
    role_arn = 'arn:aws:iam::114524529325:role/cross-account-lambda-role'
    assumed_role = sts_client.assume_role(
        RoleArn=role_arn,
        RoleSessionName='AssumeRoleSession1'
    )
    
    # Use the temporary security credentials to call the CodePipeline service
    pipeline_client = boto3.client(
        'codepipeline',
        aws_access_key_id=assumed_role['Credentials']['AccessKeyId'],
        aws_secret_access_key=assumed_role['Credentials']['SecretAccessKey'],
        aws_session_token=assumed_role['Credentials']['SessionToken']
    )
    
    try:
        # Call the StartPipelineExecution API with the necessary parameters
        response = pipeline_client.start_pipeline_execution(
            name='cms-ds-production-pipeline'
        )
    except botocore.exceptions.ClientError as e:
        error_message = e.response['Error']['Message']
        print(f"Error message: {error_message}")
        # Handle the error as needed
        return {
            'statusCode': 500,
            'body': json.dumps({'error': error_message})
        }
    
    # Print the response
    print(response)
    
    return {
        'statusCode': 200,
        'body': json.dumps({'message': 'Pipeline execution started successfully'})
    }
